<IfModule mod_ssl.c>

SSLSessionCache shmcb:/var/run/apache/sslcache(512000)
SSLStaplingCache shmcb:/var/run/apache2/stapling_cache(128000)

<VirtualHost *:443>
    # General setup for the virtual host, inherited from global configuration
    ServerName jogamp.org
    ServerAlias www.jogamp.org
    ServerPath /jogamp.org/
    SuexecUserGroup webrunner webrunner
    RewriteEngine On
    DocumentRoot /srv/www/jogamp.org

    Protocols h2 http/1.1

    UseCanonicalName Off

    # Guarantee HTTPS for 1 Year including Sub Domains
    # Not OK: Header always set Strict-Transport-Security "max-age=31536000;includeSubDomains"
    Header always set Strict-Transport-Security "max-age=31536000"

    Header always set Content-Security-Policy "frame-ancestors 'self'"
    Header always set X-Frame-Options "SAMEORIGIN"
    Header always set X-XSS-Protection "1; mode=block"
    # Prevent browsers from incorrectly detecting non-scripts as scripts
    Header always set X-Content-Type-Options "nosniff"
        
    ##Header always set Content-Security-Policy "default-src https:"
    ##Header always set Content-Security-Policy "default-src 'self'; img-src 'self'; script-src 'self'; object-src 'self'"

    # Use separate log files for the SSL virtual host; note that LogLevel
    # is not inherited from httpd.conf.
    LogLevel warn
    ErrorLog ${APACHE_LOG_DIR}/jogamp.org-ssl-error.log
    #TransferLog ${APACHE_LOG_DIR}/jogamp.org-ssl-access.log
    CustomLog ${APACHE_LOG_DIR}/jogamp.org-ssl-access.log combined

    #   Per-Server Logging:
    #   The home of a custom SSL log file. Use this when you want a
    #   compact non-error SSL logfile on a virtual host basis.
    CustomLog /var/log/apache2/jogamp.org-ssl-request.log \
              "%t %h %{SSL_PROTOCOL}x %{SSL_CIPHER}x \"%r\" %b"

    #   SSL Engine Switch:
    #   Enable/Disable SSL for this virtual host.
    SSLEngine on

    #   SSL Protocol support:
    # List the enable protocol levels with which clients will be able to
    # connect.  Disable SSLv2 access by default:
    # SSLProtocol all -SSLv2
    SSLProtocol all -SSLv2 -SSLv3 -TLSv1 -TLSv1.1

    #   SSL Cipher Suite:
    # List the ciphers that the client is permitted to negotiate.
    # See the mod_ssl documentation for a complete list.
    # LOW: SSLCipherSuite ALL:!ADH:!EXPORT:!SSLv2:RC4+RSA:+HIGH:+MEDIUM:+LOW
    # Enable only secure ciphers:
    #SSLCipherSuite HIGH:MEDIUM:!aNULL:!MD5
    #SSLCipherSuite HIGH:!ECDHE:!aNULL:!MD5
    #SSLCipherSuite HIGH:!aNULL:!MD5
    SSLCipherSuite HIGH:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!aECDH:!EDH-DSS-DES-CBC3-SHA:!EDH-RSA-DES-CBC3-SHA:!KRB5-DES-CBC3-SHA

    # 2017: https://weakdh.org/sysadmin.html
    #SSLCipherSuite ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-DSS-AES128-GCM-SHA256:kEDH+AESGCM:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA:ECDHE-ECDSA-AES256-SHA:DHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA:DHE-DSS-AES128-SHA256:DHE-RSA-AES256-SHA256:DHE-DSS-AES256-SHA:DHE-RSA-AES256-SHA:AES128-GCM-SHA256:AES256-GCM-SHA384:AES128-SHA256:AES256-SHA256:AES128-SHA:AES256-SHA:AES:CAMELLIA:DES-CBC3-SHA:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!aECDH:!EDH-DSS-DES-CBC3-SHA:!EDH-RSA-DES-CBC3-SHA:!KRB5-DES-CBC3-SHA

    #SSLCipherSuite ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-DSS-AES128-GCM-SHA256:kEDH+AESGCM:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA:ECDHE-ECDSA-AES256-SHA:DHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA:DHE-DSS-AES128-SHA256:DHE-RSA-AES256-SHA256:DHE-DSS-AES256-SHA:DHE-RSA-AES256-SHA:AES128-GCM-SHA256:AES256-GCM-SHA384:ECDHE-RSA-RC4-SHA:ECDHE-ECDSA-RC4-SHA:AES128:AES256:RC4-SHA:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!3DES:!MD5:!PSK
    #SSLCipherSuite DHE-RSA-AES128-GCM-SHA256:DHE-DSS-AES128-GCM-SHA256:kEDH+AESGCM:DHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA:DHE-DSS-AES128-SHA256:DHE-RSA-AES256-SHA256:DHE-DSS-AES256-SHA:DHE-RSA-AES256-SHA:AES128-GCM-SHA256:AES256-GCM-SHA384:AES128:AES256:RC4-SHA:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!3DES:!MD5:!PSK
    #SSLCipherSuite DHE-DSS-AES256-GCM-SHA384:DHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES256-SHA256:DHE-DSS-AES256-SHA256:DHE-RSA-AES256-SHA:DHE-DSS-AES256-SHA:DHE-RSA-CAMELLIA256-SHA:DHE-DSS-CAMELLIA256-SHA:DHE-DSS-AES128-GCM-SHA256:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES128-SHA256:DHE-DSS-AES128-SHA256:DHE-RSA-AES128-SHA:DHE-DSS-AES128-SHA:DHE-RSA-CAMELLIA128-SHA:DHE-DSS-CAMELLIA128-SHA::HIGH:!aNULL:!eNULL:!EXPORT:!DES:!3DES:!MD5:!PSK
    SSLHonorCipherOrder on

    SSLOpenSSLConfCmd DHParameters "/etc/ssl/local/dhparams-4096.pem"

    # Add content to the 1st file of SSLCertificateFile
    #    /etc/ssl/local/DH-1024.pem
    # See https://httpd.apache.org/docs/current/ssl/ssl_faq.html#javadh

	#   A self-signed (snakeoil) certificate can be created by installing
	#   the ssl-cert package. See
	#   /usr/share/doc/apache2.2-common/README.Debian.gz for more info.
	#   If both key and certificate are stored in the same file, only the
	#   SSLCertificateFile directive is needed.
	# SSLCertificateFile    /etc/ssl/certs/ssl-cert-snakeoil.pem
	# SSLCertificateKeyFile /etc/ssl/private/ssl-cert-snakeoil.key

    #SSLCertificateFile /etc/ssl/local/jogamp2025a.org.crt.pem
    #SSLCertificateKeyFile /etc/ssl/local/jogamp2025a.org.key.apache.pem

    SSLCertificateFile /etc/letsencrypt/live/jogamp.org/fullchain.pem
    SSLCertificateKeyFile /etc/letsencrypt/live/jogamp.org/privkey.pem

	#   Server Certificate Chain:
	#   Point SSLCertificateChainFile at a file containing the
	#   concatenation of PEM encoded CA certificates which form the
	#   certificate chain for the server certificate. Alternatively
	#   the referenced file can be the same as SSLCertificateFile
	#   when the CA certificates are directly appended to the server
	#   certificate for convinience.
	#SSLCertificateChainFile /etc/apache2/ssl.crt/server-ca.crt

    #SSLCertificateChainFile /etc/ssl/local/thawte-SSL123_CA_Bundle.pem
    #SSLCertificateChainFile /etc/ssl/local/thawte-ca-cert3-20151105.pem
    #SSLCertificateChainFile /etc/ssl/local/thawte-ca-cert4-20171102.pem
    #SSLCertificateChainFile /etc/ssl/local/thawte-ca-cert5-20181102.pem
    #SSLCertificateChainFile /etc/ssl/local/jogamp2025a.org.ca.pem

	#   Certificate Authority (CA):
	#   Set the CA certificate verification path where to find CA
	#   certificates for client authentication or alternatively one
	#   huge file containing all of them (file must be PEM encoded)
	#   Note: Inside SSLCACertificatePath you need hash symlinks
	#         to point to the certificate files. Use the provided
	#         Makefile to update the hash symlinks after changes.
	#SSLCACertificatePath /etc/ssl/certs/
	#SSLCACertificateFile /etc/apache2/ssl.crt/ca-bundle.crt

	#   Certificate Revocation Lists (CRL):
	#   Set the CA revocation path where to find CA CRLs for client
	#   authentication or alternatively one huge file containing all
	#   of them (file must be PEM encoded)
	#   Note: Inside SSLCARevocationPath you need hash symlinks
	#         to point to the certificate files. Use the provided
	#         Makefile to update the hash symlinks after changes.
	#SSLCARevocationPath /etc/apache2/ssl.crl/
	#SSLCARevocationFile /etc/apache2/ssl.crl/ca-bundle.crl

	#   Client Authentication (Type):
	#   Client certificate verification type and depth.  Types are
	#   none, optional, require and optional_no_ca.  Depth is a
	#   number which specifies how deeply to verify the certificate
	#   issuer chain before deciding the certificate is not valid.
	#SSLVerifyClient require
	#SSLVerifyDepth  10

    #   Access Control:
    #   With SSLRequire you can do per-directory access control based
    #   on arbitrary complex boolean expressions containing server
    #   variable checks and other lookup directives.  The syntax is a
    #   mixture between C and Perl.  See the mod_ssl documentation
    #   for more details.
    #<Location />
    #SSLRequire (    %{SSL_CIPHER} !~ m/^(EXP|NULL)/ \
    #            and %{SSL_CLIENT_S_DN_O} eq "Snake Oil, Ltd." \
    #            and %{SSL_CLIENT_S_DN_OU} in {"Staff", "CA", "Dev"} \
    #            and %{TIME_WDAY} >= 1 and %{TIME_WDAY} <= 5 \
    #            and %{TIME_HOUR} >= 8 and %{TIME_HOUR} <= 20       ) \
    #           or %{REMOTE_ADDR} =~ m/^192\.76\.162\.[0-9]+$/
    #</Location>

    #   SSL Engine Options:
    #   Set various options for the SSL engine.
    #   o FakeBasicAuth:
    #     Translate the client X.509 into a Basic Authorisation.  This means that
    #     the standard Auth/DBMAuth methods can be used for access control.  The
    #     user name is the `one line' version of the client's X.509 certificate.
    #     Note that no password is obtained from the user. Every entry in the user
    #     file needs this password: `xxj31ZMTZzkVA'.
    #   o ExportCertData:
    #     This exports two additional environment variables: SSL_CLIENT_CERT and
    #     SSL_SERVER_CERT. These contain the PEM-encoded certificates of the
    #     server (always existing) and the client (only existing when client
    #     authentication is used). This can be used to import the certificates
    #     into CGI scripts.
    #   o StdEnvVars:
    #     This exports the standard SSL/TLS related `SSL_*' environment variables.
    #     Per default this exportation is switched off for performance reasons,
    #     because the extraction step is an expensive operation and is usually
    #     useless for serving static content. So one usually enables the
    #     exportation for CGI and SSI requests only.
    #   o StrictRequire:
    #     This denies access when "SSLRequireSSL" or "SSLRequire" applied even
    #     under a "Satisfy any" situation, i.e. when it applies access is denied
    #     and no other module can change it.
    #   o OptRenegotiate:
    #     This enables optimized SSL connection renegotiation handling when SSL
    #     directives are used in per-directory context. 
    #SSLOptions +FakeBasicAuth +ExportCertData +StrictRequire
    <Files ~ "\.(cgi|shtml|phtml|php3?)$">
        SSLOptions +StdEnvVars
    </Files>

	#   SSL Protocol Adjustments:
	#   The safe and default but still SSL/TLS standard compliant shutdown
	#   approach is that mod_ssl sends the close notify alert but doesn't wait for
	#   the close notify alert from client. When you need a different shutdown
	#   approach you can use one of the following variables:
	#   o ssl-unclean-shutdown:
	#     This forces an unclean shutdown when the connection is closed, i.e. no
	#     SSL close notify alert is send or allowed to received.  This violates
	#     the SSL/TLS standard but is needed for some brain-dead browsers. Use
	#     this when you receive I/O errors because of the standard approach where
	#     mod_ssl sends the close notify alert.
	#   o ssl-accurate-shutdown:
	#     This forces an accurate shutdown when the connection is closed, i.e. a
	#     SSL close notify alert is send and mod_ssl waits for the close notify
	#     alert of the client. This is 100% SSL/TLS standard compliant, but in
	#     practice often causes hanging connections with brain-dead browsers. Use
	#     this only for browsers where you know that their SSL implementation
	#     works correctly.
	#   Notice: Most problems of broken clients are also related to the HTTP
	#   keep-alive facility, so you usually additionally want to disable
	#   keep-alive for those clients, too. Use variable "nokeepalive" for this.
	#   Similarly, one has to force some clients to use HTTP/1.0 to workaround
	#   their broken HTTP/1.1 implementation. Use variables "downgrade-1.0" and
	#   "force-response-1.0" for this.
	BrowserMatch "MSIE [2-6]" \
		nokeepalive ssl-unclean-shutdown \
		downgrade-1.0 force-response-1.0
	# MSIE 7 and newer should be able to use keepalive
	BrowserMatch "MSIE [17-9]" ssl-unclean-shutdown

    SSLUseStapling on

    SetEnv no-gzip

    # configures the footer on server-generated documents
    ServerSignature On

    Include /etc/apache2/acme-and-redirect.conf

    RedirectMatch 404 /\.git

	<Directory "/srv/www/jogamp.org">
	    Options Indexes FollowSymLinks
	    AllowOverride All
        #Order allow,deny
        #Allow from all
        Require all granted
	</Directory>

    <Directory "/srv/www/jogamp.org/wiki">
        Options +Indexes +ExecCGI -MultiViews +SymLinksIfOwnerMatch
        AllowOverride All
        Require all granted
        AddHandler fcgid-script .php
        FcgidWrapper /srv/www/scripts/php8-wrapper .php
    </Directory>

	<Directory /srv/www/jogamp.org/bugzilla>
	    AddHandler cgi-script .cgi
	    Options +Indexes +ExecCGI -MultiViews +FollowSymLinks
	    DirectoryIndex index.cgi index.html
        AllowOverride Limit FileInfo AuthConfig Indexes Options
    </Directory>

    # mod_perl
    #PerlSwitches -w -T
    #PerlConfigRequire /srv/www/jogamp.org/bugzilla/mod_perl.pl

    #SetEnv GIT_PROJECT_ROOT /srv/scm
    #SetEnv GIT_HTTP_EXPORT_ALL
    #ScriptAlias /srv/scm/ /usr/lib/git-core/git-http-backend/
	#<Directory "/srv/www/jogamp.org/git">
    #   DirectoryIndex gitweb.cgi
    #   AllowOverride all
    #   #Order allow,deny
    #   #Allow from all
    #   Require all granted
    #   Options ExecCGI
    #   <Files gitweb.cgi>
    #   SetHandler cgi-script
    #   </Files>
    #   SetEnv  GITWEB_CONFIG  /srv/scm/gitweb.conf
    #</Directory>

    ScriptAlias /cgit/ "/srv/www/cgit/cgit.cgi/"
    Alias /cgit-css "/usr/share/cgit/"
    <Directory "/srv/www/cgit/">
       AllowOverride None
       Options ExecCGI FollowSymlinks
       Require all granted
       #<RequireAll>
       # Require all granted
       # Include sites-available/ip-bot-filter-require.conf
       #</RequireAll>

       RewriteEngine On
       RewriteBase "/cgit/"
       RewriteCond %{HTTP_USER_AGENT} Bytespider [OR]
       RewriteCond %{HTTP_USER_AGENT} Amazonbot [OR]
       RewriteCond %{HTTP_USER_AGENT} Googlebot [OR]
       RewriteCond %{HTTP_USER_AGENT} AdsBot-Google [OR]
       RewriteCond %{HTTP_USER_AGENT} msnbot [OR]
       RewriteCond %{HTTP_USER_AGENT} AltaVista [OR]
       RewriteCond %{HTTP_USER_AGENT} CensysInspect [OR]
       #RewriteCond %{HTTP_USER_AGENT} "=Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/77.0.3963.65 Safari/537.36" [OR]
       #RewriteCond %{HTTP_USER_AGENT} "=Mozilla/5.0 (Windows NT 6.2; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/62.0.2350.138 Safari/537.36" [OR]
       #RewriteCond %{HTTP_USER_AGENT} "=Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/73.0.2671.137 Safari/537.36" [OR]
       #RewriteCond %{HTTP_USER_AGENT} "=" [OR]
       RewriteCond %{HTTP_USER_AGENT} Slurp [OR]
       Include sites-available/ip-bot-filter-rewrite.conf
       RewriteRule . - [F,L]
    </Directory>
    <Directory "/srv/www/jogamp.org/git">
        Include sites-available/gitweb-to-cgit-rel_ssl.conf
    </Directory>

	Alias /icons/ "/srv/www/jogamp.org/icons/"

	<Directory "/srv/www/jogamp.org/icons">
	    Options Indexes MultiViews
	    AllowOverride None
        #Order allow,deny
        #Allow from all
        Require all granted
	</Directory>

    #
    # http://wiki.hudson-ci.org/display/HUDSON/Running+Hudson+behind+Apache
    #
    ProxyRequests     Off
    ProxyPreserveHost On

    # Local reverse proxy authorization override
    # Most unix distribution deny proxy by default (ie /etc/apache2/mods-enabled/proxy.conf in Ubuntu)
    <Proxy http://127.0.0.1:8080/chuck*>
      #Order deny,allow
      #Allow from all
      #Require all denied
      Require all granted
    </Proxy>

    ProxyPass         /chuck  http://127.0.0.1:8080/chuck
    ProxyPassReverse  /chuck  http://127.0.0.1:8080/chuck
    ProxyPassReverse  /chuck  http://jogamp.org/chuck

#   ProxyPass /chuck/ http://127.0.0.1:8080/chuck/
#   <Location /chuck/>
#     ProxyPassReverse /
#     #Order deny,allow
#     #Allow from all
#     Require all denied
#   </Location>
    Header edit Location ^http://jogamp.org/chuck/ https://jogamp.org/chuck/

    Include sites-available/ip-bot-filter-rewrite.conf
    RewriteRule . - [F,L]

    RewriteCond %{HTTP_HOST} ^www\.jogamp\.org$ [NC]
    RewriteRule ^/(.*)$ https://jogamp.org/$1 [R=301,L,NE]

    RewriteCond %{HTTP_HOST} ^scm\.jogamp\.org$ [NC]
    RewriteRule ^/(.*)$ https://jogamp.org/cgit/$1 [R=301,L,NE]

    RewriteCond %{HTTP_HOST} ^(.*)\.jogamp\.org$ [NC]
    RewriteRule ^/(.*)$ https://jogamp.org/%1/$1 [R=301,L,NE]

    RewriteCond %{HTTP_HOST} ^www\.jogamp\.com$ [NC]
    RewriteRule ^/(.*)$ https://jogamp.org/$1 [R=301,L,NE]

    RewriteCond %{HTTP_HOST} ^(.*)\.jogamp\.com$ [NC]
    RewriteRule ^/(.*)$ https://jogamp.org/%1/$1 [R=301,L,NE]

    RewriteCond %{HTTP_HOST} ^jogamp\.com$ [NC]
    RewriteRule ^/(.*)$ https://jogamp.org/$1 [R=301,L,NE]

</VirtualHost>                                  

</IfModule>

